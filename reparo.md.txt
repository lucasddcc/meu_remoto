1. Alterar a Mensagem do Último Commit
Se você deseja apenas corrigir ou alterar a mensagem do último commit:

Passo 1: Execute o comando:

bash
Copiar código
git commit --amend
Isso abrirá o editor de texto padrão configurado no Git (como o Vim ou o Nano) com a mensagem do último commit.

Passo 2: Edite a mensagem conforme necessário.

Passo 3: Salve e feche o editor. O commit será atualizado com a nova mensagem.

Alternativamente, você pode alterar a mensagem diretamente no comando sem abrir o editor:

bash
Copiar código
git commit --amend -m "Nova mensagem do commit"
2. Adicionar Arquivos Esquecidos ao Último Commit
Se você esqueceu de adicionar algum arquivo no último commit:

Passo 1: Adicione o(s) arquivo(s) que faltaram:

bash
Copiar código
git add caminho/para/o/arquivo
Substitua caminho/para/o/arquivo pelo caminho real do arquivo que deseja adicionar.

Passo 2: Em seguida, execute:

bash
Copiar código
git commit --amend --no-edit
A opção --no-edit mantém a mensagem do commit original sem alterações.

3. Remover Arquivos do Último Commit
Se você adicionou algum arquivo por engano no último commit:

Passo 1: Remova o arquivo do índice de staging:

bash
Copiar código
git reset HEAD caminho/para/o/arquivo
Passo 2: Opcionalmente, remova o arquivo do diretório de trabalho se necessário:

bash
Copiar código
git rm --cached caminho/para/o/arquivo
Passo 3: Atualize o commit sem alterar a mensagem:

bash
Copiar código
git commit --amend --no-edit
4. Combinar Alterações Recentes com o Último Commit
Se você realizou novas alterações que deseja incluir no último commit:

Passo 1: Adicione as alterações ao índice de staging:

bash
Copiar código
git add .
(Use git add . para adicionar todas as alterações ou especifique arquivos individuais conforme necessário.)

Passo 2: Atualize o commit:

bash
Copiar código
git commit --amend --no-edit
Atenção Importante
Reescrever Histórico Público: O uso de git commit --amend altera o histórico do Git. Evite usar este comando para commits que já foram enviados (pushed) para um repositório remoto que outros colaboradores utilizam, pois isso pode causar conflitos e complicações no histórico compartilhado.

Forçar o Push: Se você amendou um commit que já foi enviado para um repositório remoto, será necessário forçar o envio das alterações:

bash
Copiar código
git push --force
Use o --force com cuidado, pois isso sobrescreverá o histórico remoto e pode afetar outros colaboradores.

Resumo
O git commit --amend é extremamente útil para corrigir rapidamente o último commit, seja para ajustar mensagens, adicionar arquivos esquecidos ou combinar alterações. No entanto, é fundamental usá-lo com responsabilidade, especialmente em ambientes colaborativos, para manter a integridade do histórico do projeto.